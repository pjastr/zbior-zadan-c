[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Zbiór zadań - C",
    "section": "",
    "text": "Zbiór zadań - C\nTu będzie zbiór zadań z programowania w języku C. Inspiracją było zebranie zadań powstałych w trakcie prowadzenia zajęć dydaktycznych realizowanych na Wydziale Matematyki i Informatyki Uniwersytetu Warmińsko-Mazurskiego w Olsztynie.\nRozwiązania wybranych zadań dostępne są tutaj: https://github.com/pjastr/zbior-zadan-c-rozw.\n\n\n\n\nKrzaczkowski, Jacek. 2011. Zadania z programowania w języku C/C++, cz. I. Instytut Informatyki UMCS Lublin.",
    "crumbs": [
      "Zbiór zadań - C"
    ]
  },
  {
    "objectID": "operacjewejsciawyjscia.html",
    "href": "operacjewejsciawyjscia.html",
    "title": "1  Operacje wejścia, wyjścia.",
    "section": "",
    "text": "Napisz program, który prosi użytkownika o wprowadzenie jednej liczby całkowitej, a następnie wyświetla ją na ekranie.\nStwórz program, który wczytuje od użytkownika dwie liczby zmiennoprzecinkowe i wypisuje ich różnicę.\nZaprojektuj aplikację, która pyta użytkownika o jego rok urodzenia, a następnie wypisuje rok poprzedni (o jeden mniejszy).\nNapisz program, który wczytuje od użytkownika trzy liczby całkowite i wypisuje ich średnią jako wartość zmiennoprzecinkową.\nUtwórz program, który prosi użytkownika o wprowadzenie dwóch liter (znaków), a następnie wypisuje je w odwrotnej kolejności.\nNapisz program, który prosi użytkownika o wprowadzenie jednej liczby zmiennoprzecinkowej, a następnie podwaja jej wartość i wypisuje wynik.\nUtwórz program, który wczytuje od użytkownika liczbę zmiennoprzecinkową reprezentującą kwotę w dolarach, a następnie wypisuje, ile to jest euro, przyjmując stały kurs wymiany (np. 1 dolar = 0.85 euro).\nNapisz program, który wyświetla na ekranie tekst: To jest cytat: \"Często używam języka C.\". Upewnij się, że znaki cudzysłowu są poprawnie wyświetlane jako część napisu.\nStwórz program, który wypisuje na standardowe wyjście ścieżkę do folderu w systemie Windows, np. C:\\Program Files\\MojaAplikacja\\ (na sztywno, bez pobierania czegoś z systemu) lub C:\\\\Program Files\\\\MojaAplikacja\\\\.\nZaprojektuj program, który pokazuje, jak wypisać na ekranie następujący tekst: Specjalne znaki: \\t (tabulacja), \\n (nowa linia), % (procent), \\\\ (ukośnik wsteczny)..\nNapisz program, który wczytuje ze standardowego wejścia dwie liczby wymierne reprezentujące długości boków trójkąta prostokątnego. Następnie oblicz i wyświetl długość przeciwprostokątnej.\nNapisz program, który wczytuje ze standardowego wejścia całkowitą i wypisuje na standardowym wyjściu jej wartość bezwzględną.\nNapisz program, który wczytuje ze standardowego wejścia zmiennoprzecinkową i wypisuje na standardowym wyjściu jej wartość bezwzględną.\nZnajdź przykład i wyświetl na standardowym wyjściu, kiedy dodawanie liczb zmiennoprzecinowych nie jest łączne.",
    "crumbs": [
      "Podstawy języka C",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Operacje wejścia, wyjścia.</span>"
    ]
  },
  {
    "objectID": "intrukcjewarunkowe.html",
    "href": "intrukcjewarunkowe.html",
    "title": "2  Instrukcje warunkowe, operator warunkowy",
    "section": "",
    "text": "W poniższych zadaniach jako instrukcję warunkową należy wykorzystać if, if else, switch case. Przez operator warunkowy rozumie się ?.\n\nNapisz program, który prosi użytkownika o wprowadzenie liczby całkowitej. Program powinien wyświetlić informację, czy wprowadzona liczba jest dodatnia, ujemna czy równa zero.\nNapisz program, który przyjmuje od użytkownika dwie liczby całkowite i wyświetla większą z nich.\nNapisz program, który prosi o wprowadzenie oceny w skali od 1 do 5. Program powinien wyświetlić opis oceny: niedostateczny (1), dopuszczający (2), dostateczny (3), dobry (4), bardzo dobry (5). Dla liczby spoza zakresu, program powinien wyświetlić komunikat o błędzie.\nNapisz program, który prosi użytkownika o wprowadzenie trzech różnych liczb całkowitych i wyświetla najmniejszą z nich.\nNapisz program, który pyta użytkownika o rok i sprawdza, czy podany rok jest rokiem przestępnym. Rok przestępny to taki, który jest podzielny przez 4, ale nie jest podzielny przez 100, chyba że jest też podzielny przez 400.\nNapisz program, który przyjmuje od użytkownika dwie liczby całkowite i wyświetla informację, czy suma obu liczb jest parzysta czy nieparzysta.\nNapisz program, który przyjmuje od użytkownika trzy liczby zmiennoprzecinkowe a, b, c. Potrakuj je jako współczynniki równania kwadratowego \\(ax^2+bx+c=0\\). Na standardowym wyjściu wypisz wszystkie warianty rozwiązań tego równania.\nNapisz program, który przyjmuje dwie liczby całkowite jako wejście od użytkownika i używa operatora warunkowego, aby znaleźć i wyświetlić największą z nich.\nNapisz program, który przyjmuje trzy liczby całkowite jako wejście od użytkownika i używa operatora warunkowego, aby znaleźć i wyświetlić najmniejszą z nich.\nUżywając operatora warunkowego ?, napisz program, który przyjmuje od użytkownika jedną liczbę całkowitą i wyświetla “parzysta” lub “nieparzysta” w zależności od wartości liczby.\nStwórz program, który prosi o wprowadzenie dwóch liczb zmiennoprzecinkowych i używa operatora warunkowego, aby wyświetlić, która z nich jest większa, lub czy są równe z dokładnością do dwóch miejsc po przecinku.\nUżywając operatora warunkowego, napisz program, który prosi użytkownika o wprowadzenie oceny w skali od 0 do 100 i wyświetla “Zdane”, jeśli ocena jest większa lub równa 51, lub “Nie zdane” w przeciwnym przypadku.\nNapisz program, który przyjmuje rok jako wejście od użytkownika i za pomocą operatora warunkowego sprawdza, czy jest to rok przestępny. Program powinien wyświetlać “Rok przestępny” lub “Rok nieprzestępny” w zależności od wyniku.",
    "crumbs": [
      "Podstawy języka C",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Instrukcje warunkowe, operator warunkowy</span>"
    ]
  },
  {
    "objectID": "petle.html",
    "href": "petle.html",
    "title": "3  Pętle",
    "section": "",
    "text": "Zadania należy rozwiązać bez tablic, napisów, wskaźników, napisów, wbudowanych funkcji matematycznych. Nie twórz samodzielnie też własnych funkcji.\n\nNapisz program, który wyświetla wszystkie liczby całkowite od 1 do 100, używając pętli for.\nUtwórz program, który prosi użytkownika o wprowadzenie liczby całkowitej n, a następnie wyświetla sumę wszystkich liczb całkowitych od 1 do n używając pętli while.\nNapisz program, który czyta od użytkownika liczby całkowite do momentu wprowadzenia zera i następnie wyświetla sumę wszystkich wprowadzonych liczb pozytywnych oraz sumę wszystkich liczb negatywnych, używając pętli do-while.\nStwórz program, który oblicza i wyświetla silnię podanej przez użytkownika nieujemnej liczby całkowitej, używając pętli for.\nNapisz program, który wyświetla pierwszych 10 liczb ciągu Fibonacciego, używając pętli while.\nNapisz program, który prosi użytkownika o wprowadzenie dodatniej liczby całkowitej n, a następnie oblicza i wyświetla \\(\\lfloor \\sqrt{n} \\rfloor\\) (część całkowita/podłoga pierwiastka kwadratowego).\nNapisz program, który prosi użytkownika o wprowadzenie dodatniej liczby całkowitej n, a następnie oblicza i wyświetla \\(\\lceil \\sqrt{n} \\rceil\\) (sufit pierwiastka kwadratowego).\nNapisz program, który prosi użytkownika o wprowadzenie 10 dodatnich liczb całkowitych i ustawia je w ciąg \\(a_1, \\ldots, a_{10}\\). Oblicz i wyświetl ile elementów ciągu spełnia nierówność \\(a_k &lt; \\frac{a_{k-1}+a_{k+1}}{2}\\) dla \\(1&lt;k&lt;10\\).\nNapisz program, który prosi użytkownika o wprowadzenie dodatniej liczby całkowitej \\(n\\), a następnie \\(n\\) dodatnich liczb całkowitych i ustawia je w ciąg \\(a_1, \\ldots, a_n\\). Oblicz i wyświetl ile elementów ciągu spełnia nierówność \\(a_k &lt; \\frac{a_{k-1}+a_{k+1}}{2}\\) dla \\(1&lt;k&lt;n\\).",
    "crumbs": [
      "Podstawy języka C",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Pętle</span>"
    ]
  },
  {
    "objectID": "funkcje.html",
    "href": "funkcje.html",
    "title": "4  Funkcje",
    "section": "",
    "text": "Zadania należy rozwiązać bez tablic, napisów, wskaźników, wbudowanych funkcji matematycznych. W zadaniach można stworzyć kilka funkcji pomocniczych. Do każdej funkcji z polecenia należy wywołać przypadek testowy (wywołać co najmniej jeden raz na poprawnym argumencie). W poleceniach używana jest konwencja camelCase. Zwróć uwagę, czy funkcja ma coś zwrócić czy wyświetlić.\n\nNapisz funkcję sumTwoNumbers, której argumentami są dwie liczby całkowite. Funkcja ma wyświetlać sumę liczb przekazany jako argument funkcji. Stwórz przypadek testowy.\nNapisz funkcję calculateAbsoluteValue, której argumentem jest liczba zmiennoprzecinkowa. Funkcja ma zwracać wartość bezwzględną liczby przekazanej jako argument funkcji. Stwórz przypadek testowy.\nNapisz funkcję calculateFactorial, której argumentem jest liczba całkowita nieujemna. Funkcja ma zwracać wartość silni liczby przekazanej jako argument funkcji, obliczoną metodą nierekurencyjną. Stwórz przypadek testowy.\nNapisz funkcję sumNumbers, której argumentem jest dodatnia liczba całkowita \\(n\\). Funkcja ma zwracać sumę liczb od 1 do \\(n\\) włącznie. Stwórz przypadek testowy.\nNapisz funkcję sumSquares, której argumentem jest dodatnia liczba całkowita \\(n\\). Funkcja ma zwracać sumę kwadratów liczb od 1 do \\(n\\) włącznie. Stwórz przypadek testowy.\nNapisz funkcję calculatePowerOfTwo, której argumentem jest liczba całkowita \\(n\\). Funkcja ma zwracać wartość \\(2^n\\). Stwórz przypadek testowy.\nNapisz funkcję calculateSquareRootFloor, której argumentem jest nieujemna liczba całkowita \\(n\\). Funkcja ma zwracać część całkowitą pierwiastka kwadratowego z \\(n\\). Stwórz przypadek testowy.\nNapisz funkcję countFunctionCalls, która nie przyjmuje żadnych argumentów. Funkcja ma zliczać i wypisywać na standardowym wyjściu liczbę swoich wywołań od momentu uruchomienia programu. Stwórz przypadek testowy. Wykorzystaj zmienne statyczne.\nNapisz funkcję calculateFactorialRecursively, której argumentem jest liczba całkowita nieujemna \\(n\\). Funkcja ma zwracać wartość silni liczby \\(n\\), obliczoną metodą rekurencyjną. Stwórz przypadek testowy.\nNapisz funkcję calculateFibonacciRecursively, której argumentem jest liczba całkowita nieujemna \\(n\\). Funkcja ma zwracać \\(n\\)-ty wyraz ciągu Fibonacciego, obliczony metodą rekurencyjną. Stwórz przypadek testowy.\nNapisz funkcję calculateArithmeticSequenceRecursively, której argumentami są dwie liczby całkowite: dodatnie \\(n\\) (numer wyrazu ciągu do obliczenia) oraz \\(d\\) (różnica ciągu arytmetycznego), przy założeniu, że wyraz początkowy ciągu \\(a_1\\) wynosi 1. Funkcja ma zwracać \\(n\\)-ty wyraz ciągu arytmetycznego, obliczony metodą rekurencyjną. Stwórz przypadek testowy.\nNapisz funkcję calculateGeometricSequenceRecursively, której argumentami są dwie liczby całkowite: dodatnie \\(n\\) (numer wyrazu ciągu do obliczenia) oraz \\(d\\) (iloraz ciągu geometrycznego), przy założeniu, że wyraz początkowy ciągu \\(a_1\\) wynosi 1. Funkcja ma zwracać \\(n\\)-ty wyraz ciągu geometrycznego, obliczony metodą rekurencyjną. Stwórz przypadek testowy.\nNapisz funkcję calculate13, której argumentem jest dodatnia liczba całkowita \\(n\\). Funkcja ma zwracać wartość wyrażoną wzorem \\(f(n) = 2f(n-1) + 3\\), gdzie \\(f(1) = 1\\). Stwórz przypadek testowy.\nNapisz funkcję calculate14, której argumentem jest dodatnia liczba całkowita \\(n\\). Funkcja ma zwracać wartość wyrażoną wzorem \\(f(n) = 3f(n-1) - 1\\), gdzie \\(f(1) = 2\\). Stwórz przypadek testowy.\nNapisz funkcję calculate15, której argumentem jest dodatnia liczba całkowita \\(n\\). Funkcja ma zwracać wartość wyrażoną wzorem \\(f(n) = f(n-1) + 2f(n-2)\\), gdzie \\(f(1) = 1\\) i \\(f(2) = 2\\). Stwórz przypadek testowy.\nNapisz funkcję calculate16, której argumentem jest dodania liczba całkowita \\(n\\). Funkcja ma zwracać wartość wyrażoną wzorem \\(f(n) = 2f(n-1) + 3f(n-2)\\), gdzie \\(f(1) = 2\\) i \\(f(2) = 3\\). Stwórz przypadek testowy.\nNapisz rekurencyjną funkcję calculate17, której argumentem jest nieujemna liczba całkowita \\(n\\). Funkcja ma zwracać wartość wyrażoną wzorem \\(f(n) = f(0)+f(1)+\\ldots +f(n-1)\\), gdzie \\(f(0) = f(1) = 1\\). Stwórz przypadek testowy.\nNapisz rekrurencyjną funkcję calculateGCD, której argumentami są dwie dodatnie liczby całkowite \\(n\\) i \\(m\\). Funkcja ma zwracać największy wspólny dzielnik (NWD) tych liczb algorytmem Euklidesa. Stwórz przypadek testowy.",
    "crumbs": [
      "Podstawy języka C",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Funkcje</span>"
    ]
  },
  {
    "objectID": "wskazniki.html",
    "href": "wskazniki.html",
    "title": "5  Wskaźniki",
    "section": "",
    "text": "Zadania należy rozwiązać bez interpretacji wskaźników jako tablic.\n\nSkopiuj lub przepisz kod i sprawdź wyniki na standardowym wyjściu:\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main()\n{\n    printf(\"%Iu\\n\", sizeof(int));\n    printf(\"%Iu\\n\", sizeof(int*));\n    return 0;\n}\n\nW jednym pliku wykonaj czynności:\n\n\nNapisz funkcję sum z dwoma argumentami typu int. Funkcja ma zwracać sumę wartości przekazanych przez argumenty. Stwórz przypadek testowy.\nNapisz funkcję sumVals z dwoma argumentami, które są wskaźnikami do zmiennych typu int. Funkcja powinna zwracać sumę wartości, na które wskazują te argumenty. Utwórz przypadek testowy.\nNapisz funkcję addPtr z trzema argumentami, które są wskaźnikami do zmiennych typu int. Funkcja ma być procedurą (typ zwracany void). Funkcja ma ustawić wartość zmiennej wskazywanej przez trzeci argument funkcji jako sumę wartości wskazywanych przez dwa wcześniejsze argumenty. Utwórz przypadek testowy.\n\n\nNapisz funkcję copyInt z argumentami: x typu int oraz w, który jest wskaźnikiem do int. Funkcja ma przepisać wartość x do zmiennej wskazywanej przez w. Stwórz przypadek testowy.\nNapisz funkcję findMax z dwoma argumentami: wskaźnikiem num1 na stałą wartość typu double i stałym wskaźnikiem num2 na zmienną typu double. Funkcja ma zwracać większą wartość spośród tych, na które wskazują num1 i num2. Utwórz przypadek testowy.\nNapisz funkcję initInts, która nie przyjmuje argumentów i rezerwuje blok trzech zmiennych typu int, ustawiając ich wartości kolejno na 5, -12, 33. Funkcja zwraca wskaźnik na środkową zmienną. Utwórz przypadek testowy w funkcji main, który wyświetla wartości z bloku stworzonego przez funkcję.\nNapisz funkcję initFloats, która nie przyjmuje argumentów i rezerwuje blok trzech zmiennych typu float, ustawiając ich wartości kolejno na 4.5, 2.3, -4.2. Funkcja zwraca wskaźnik na początkową ze zmiennych w bloku. Utwórz przypadek testowy w funkcji main, który wyświetla wartości z bloku stworzonego przez funkcję.\nNapisz funkcję initFlts, która nie przyjmuje argumentów i rezerwuje blok czterech zmiennych typu float, ustawiając ich wartości kolejno na 0.5, 1.5, 2.5, i 3.5. Funkcja zwraca wskaźnik na ostatnią zmienną w bloku. Utwórz przypadek testowy w main, aby wyświetlić wartości z bloku stworzonego przez funkcję.\nNapisz funkcję sumToPtr z trzema argumentami: dwoma wskaźnikami na stałe typu int i wskaźnikiem na zmienną typu int. Funkcja ma przepisać do zmiennej wskazywanej przez trzeci argument sumę wartości stałych wskazywanych przez pierwszy i drugi argument. Utwórz przypadek testowy.\nNapisz funkcję sqrCopy z dwoma argumentami: wskaźnikiem na stałą typu int i wskaźnikiem na zmienną typu int. Funkcja ma przepisać kwadrat wartości stałej do zmiennej wskazywanej przez drugi argument. Utwórz przypadek testowy.\nNapisz funkcję subPtrs z dwoma argumentami: wskaźnikiem num1 na stałą wartość typu double i stałym wskaźnikiem num2 na zmienną typu double. Funkcja ma zwracać różnicę wartości, na które wskazują num1 i num2. Utwórz przypadek testowy.\nNapisz funkcję sumSqrs z dwoma argumentami: wskaźnikiem num1 na stałą wartość typu int i stałym wskaźnikiem num2 na zmienną typu int. Funkcja ma zwracać sumę kwadratów wartości wskazywanych przez num1 i num2. Utwórz przypadek testowy.\nNapisz funkcję linFuncVal z trzema argumentami: wskaźnikiem a na stałą wartość typu float, stałym wskaźnikiem b na zmienną typu float, i wskaźnikiem x na stałą wartość typu float. Funkcja ma obliczać i zwracać wartość funkcji liniowej y=ax+b dla argumentu x, gdzie a i b są wskazywane przez odpowiednie wskaźniki. Utwórz przypadek testowy.\nNapisz funkcję minPtr z trzema argumentami, które są wskaźnikami na zmienne typu int. Funkcja zwraca wskaźnik na zmienną o najmniejszej wartości spośród tych, na które wskazują argumenty. Utwórz przypadek testowy w main, aby wyświetlić najmniejszą wartość spośród trzech zmiennych.\nNapisz funkcję multPtrs z dwoma argumentami: wskaźnikiem num1 na stałą wartość typu double i stałym wskaźnikiem num2 na zmienną typu double. Funkcja zwraca iloczyn wartości wskazywanych przez te wskaźniki. Utwórz przypadek testowy.\nNapisz funkcję absVal z jednym argumentem, którym jest wskaźnik na zmienną typu int. Funkcja oblicza wartość bezwzględną zmiennej wskazywanej przez wskaźnik i aktualizuje tę zmienną. Utwórz przypadek testowy w main, aby wyświetlić wartość zaktualizowanej zmiennej.\nNapisz funkcję swap z dwoma argumentami: wskaźnikiem ptr1 na zmienną typu int i wskaźnikiem ptr2 na inną zmienną tego samego typu. Funkcja zamienia miejscami wartości wskazywane przez wskaźniki. Utwórz przypadek testowy.\nNapisz funkcję swapSign z dwoma argumentami: wskaźnikiem ptr1 na zmienną typu double i wskaźnikiem ptr2 na inną zmienną tego samego typu. Funkcja zamienia miejscami wartości wskazywane przez wskaźniki, jeśli mają one różne znaki. W przeciwnym razie nie robi nic. Utwórz przypadek testowy.",
    "crumbs": [
      "Podstawy języka C",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Wskaźniki</span>"
    ]
  },
  {
    "objectID": "wskaznikinafunkcje.html",
    "href": "wskaznikinafunkcje.html",
    "title": "6  Wskaźniki na funkcję",
    "section": "",
    "text": "Napisz funkcję calculate, która przyjmuje dwa argumenty: wskaźnik na funkcję operation oraz liczbę całkowitą number. Funkcja operation ma przyjmować jeden argument typu int i zwracać wartość typu int. Funkcja calculate powinna wywołać funkcję operation z argumentem number i zwrócić jej wynik. Stwórz przypadek testowy.\nNapisz funkcję o nazwie applyFunction, która przyjmuje trzy argumenty: wskaźnik na funkcję func, która przyjmuje jeden argument typu int i zwraca int, oraz dwie liczby całkowite: start i end. Funkcja applyFunction powinna wywołać funkcję func dla każdej liczby w zakresie od start do end (włącznie) i wydrukować wyniki na standardowe wyjście. Stwórz przypadek testowy.\nNapisz funkcję, która otrzymuje trzy argumenty:\n\n\ndwa wskaźniki na funkcje z jednym argumentem typu int zwracające wartość typu int,\ndodatnią wartość n typu int,\n\ni zwraca 1, jeżeli otrzymane w argumentach funkcje mają ten sam znak dla wartości dla liczb całkowitych od 0 do \\(n\\), a zwraca 0 w przeciwnym wypadku. Stwórz przypadek testowy.\n\nNapisz funkcję calculateOperation, która przyjmuje jako argumenty: wskaźnik na funkcję operation, która przyjmuje dwa argumenty typu double i zwraca double, oraz dwa argumenty typu double - number1 i number2. Funkcja calculateOperation ma zwracać wynik wywołania funkcji operation na argumentach number1 i number2. Stwórz przypadek testowy.\nNapisz funkcję modifyAndSum, która ma przyjmować jako argument wskaźnik na funkcję modifier, która przyjmuje jeden argument typu int i zwraca int, oraz dwa argumenty typu int: number1 i number2. Funkcja modifyAndSum powinna modyfikować obie liczby za pomocą funkcji modifier i zwracać ich sumę. Przykładem funkcji modifier może być funkcja, która zwiększa liczbę o 1 lub zmienia znak liczby. Stwórz przypadek testowy.\nStwórz funkcję applyCondition, która przyjmuje trzy argumenty: wskaźnik na funkcję condition zwracającą wartość typu int i przyjmującą int, wskaźnik na funkcję action również przyjmującą i zwracającą int, oraz wartość całkowitą value. Funkcja applyCondition powinna najpierw wywołać condition z value jako argumentem. Jeśli wynik to 1, applyCondition powinna następnie wywołać action na value i zwrócić wynik. W przeciwnym wypadku powinna zwrócić value bez zmian.",
    "crumbs": [
      "Podstawy języka C",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Wskaźniki na funkcję</span>"
    ]
  },
  {
    "objectID": "debugowanie.html",
    "href": "debugowanie.html",
    "title": "7  Debugowanie",
    "section": "",
    "text": "Poniżej znajduje się kod w języku C. W niektórych linijkach są komentarze. Twoim zadaniem jest wpisanie wartości odpowiednich zmiennych po wykonaniu konkretnej linii kodu. Dopisanie nowych linijek czy zaburzenie struktury kodu oznacza złe wykonanie polecenia.\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    int a = 10; // a = , b =\n    int b = 5;  // a = , b =\n    a = a + b;  // a = , b =\n    b = a - b;  // a = , b =\n    a = a - b;  // a = , b =\n    b = a * b;  // a = , b =\n    a = b / a;  // a = , b =\n    b = a &lt;&lt; 2; // a = , b =\n    a = b &gt;&gt; 1; // a = , b =\n    b = a & b;  // a = , b =\n    a = a ^ b;  // a = , b =\n    b = ~a;     // a = , b =\n    return 0;\n}\n\nPoniżej znajduje się kod w języku C. W niektórych linijkach są komentarze. Twoim zadaniem jest wpisanie wartości odpowiednich zmiennych po wykonaniu konkretnej linii kodu. Dopisanie nowych linijek czy zaburzenie struktury kodu oznacza złe wykonanie polecenia.\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    int a = 10; // a = , b = , c =\n    int b = 5;  // a = , b = , c =\n    int c = 0;  // a = , b = , c =\n    a = a + b;  // a = , b = , c =\n    b = a - b;  // a = , b = , c =\n    a = a - b;  // a = , b = , c =\n    c = a;      // a = , b = , c =\n    a = b * c;  // a = , b = , c =\n    b = a / c;  // a = , b = , c =\n    c = b &lt;&lt; 2; // a = , b = , c =\n    b = c &gt;&gt; 1; // a = , b = , c =\n    a = b & c;  // a = , b = , c =\n    c = a ^ b;  // a = , b = , c =\n    b = ~c;     // a = , b = , c =\n    return 0;\n}",
    "crumbs": [
      "Podstawy języka C",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Debugowanie</span>"
    ]
  },
  {
    "objectID": "tablice.html",
    "href": "tablice.html",
    "title": "8  Tablice jednowymiarowe",
    "section": "",
    "text": "Zadania należy rozwiązać bez konwersji liczb na napisy.\n\nNapisz funkcję findMaxValue, która przyjmuje jako argumenty tablicę liczb całkowitych numbers oraz jej rozmiar size (dodatnia liczba całkowita). Funkcja powinna przeszukać tablicę i wyświetlić maksymalną wartość znalezioną w tej tablicy. Stwórz przypadek testowy.\nNapisz funkcję average, której argumentem jest dodatnia liczba całkowita \\(n\\) oraz \\(n\\)-elementowa tablica tab o elementach typu int oraz zwraca średnią arytmetyczną jako liczbę zmiennoprzecinkową. Stwórz przypadek testowy.\nNapisz funkcję sumSquares, której argumentem jest dodatnia liczba całkowita \\(n\\) oraz \\(n\\)-elementowa tablica tab o elementach typu int oraz zwraca sumę kwadratów elementów tablicy. Stwórz przypadek testowy.\nNapisz funkcję copyArr, która otrzymuje trzy argumenty: dodatnią liczbę całkowitą n oraz dwie n-elementowe tablice tab1, tab2 o elementach typu int i przepisuje kolejno elementy tablicy tab1 do tablicy tab2. Stwórz przypadek testowy.\nNapisz funkcję revCopy, która otrzymuje trzy argumenty: dodatnią liczbę całkowitą n oraz dwie n-elementowe tablice tab1, tab2 o elementach typu int i przepisuje elementy tablicy tab1 do tablicy tab2 w odwrotnej kolejności. Stwórz przypadek testowy.\nNapisz funkcję reverseArr, której argumentami są dodatnia liczba całkowita n reprezentująca rozmiar tablicy oraz n-elementowa tablica tab o elementach typu int. Funkcja ta ma odwrócić kolejność elementów w tablicy tab bezpośrednio w niej (w miejscu), nie używając dodatkowej tablicy do przechowywania wyników. Stwórz przypadek testowy.\nNapisz funkcję maxValue, której argumentami są dodatnia liczba całkowita n reprezentująca rozmiar tablicy oraz n-elementowa tablica tab o elementach typu int. Funkcja ta ma przeszukać tablicę i zwrócić największą znalezioną w niej wartość. Zakładamy, że tablica nie jest pusta. Stwórz przypadek testowy.\nNapisz funkcję minValue, której argumentami są dodatnia liczba całkowita n reprezentująca rozmiar tablicy oraz n-elementowa tablica tab o elementach typu int. Funkcja ta ma przeszukać tablicę i zwrócić najmniejszą znalezioną w niej wartość. Zakładamy, że tablica nie jest pusta. Stwórz przypadek testowy.\nNapisz funkcję maxIdx, której argumentami są dodatnia liczba całkowita n reprezentująca rozmiar tablicy oraz n-elementowa tablica tab o elementach typu int. Funkcja ta ma znaleźć i zwrócić indeks największego elementu w tablicy. W przypadku wystąpienia więcej niż jednego elementu o maksymalnej wartości, funkcja powinna zwrócić indeks pierwszego z nich (czyli najmniejszy możliwy indeks). Zakładamy, że tablica nie jest pusta. Stwórz przypadek testowy.\nNapisz funkcję minIdxMax, której argumentami są dodatnia liczba całkowita n reprezentująca rozmiar tablicy oraz n-elementowa tablica tab o elementach typu int. Funkcja ta ma przeszukać tablicę i zwrócić indeks najmniejszego elementu w tablicy. W przypadku wystąpienia kilku takich samych najmniejszych elementów, zwróć największy z możliwych indeksów tych elementów. Zakładamy, że tablica nie jest pusta. Stwórz przypadek testowy.\nNapisz funkcję shiftLeft, której argumentami są dodatnia liczba całkowita n reprezentująca rozmiar tablicy oraz n-elementowa tablica tab o elementach typu float. Funkcja ta ma przesunąć wszystkie elementy tablicy o jedną pozycję w lewo, a ostatni element w tablicy powinien zostać zastąpiony przez pierwszy element oryginalnej tablicy. Zakładamy, że tablica nie jest pusta. Stwórz przypadek testowy.\nNapisz funkcję shiftRight2, której argumentami są dodatnia liczba całkowita n reprezentująca rozmiar tablicy oraz n-elementowa tablica tab o elementach typu int. Funkcja ta ma przesunąć wszystkie elementy tablicy o dwa miejsca w prawo. Elementy, które “wypadną” poza tablicę, powinny pojawić się na jej początku w tej samej kolejności. Stwórz przypadek testowy.\nNapisz funkcję shiftLeft, której argumentami są dodatnia liczba całkowita n reprezentująca rozmiar tablicy oraz n-elementowa tablica tab o elementach typu int. Funkcja ma zwrócić wskaźnik do nowo utworzonej dynamicznej tablicy, w której wszystkie elementy zostały przesunięte o jedną pozycję w lewo w stosunku do oryginalnej tablicy, a ostatni element nowej tablicy jest równy początkowemu elementowi oryginalnej tablicy. Stwórz przypadek testowy.\nNapisz funkcję shiftRight, której argumentami są dodatnia liczba całkowita n reprezentująca rozmiar tablicy oraz n-elementowa tablica tab o elementach typu int. Funkcja ma zwrócić wskaźnik do nowo utworzonej dynamicznej tablicy, w której wszystkie elementy zostały przesunięte o jedną pozycję w prawo w stosunku do oryginalnej tablicy, a pierwszy element nowej tablicy jest równy ostatniemu elementowi oryginalnej tablicy. Stwórz przypadek testowy.\nPoniżej znajduje się kod w języku C. W niektórych linijkach są komentarze. Twoim zadaniem jest wpisanie wartości odpowiednich zmiennych po wykonaniu konkretnej linii kodu. Dopisanie nowych linijek czy zaburzenie struktury kodu oznacza złe wykonanie polecenia.\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint foo(int*a,int*b)\n{\n    return *a-*b;\n}\n\nint main()\n{\n    int tab[] = {3,3,0,0,3,3,-4,-4,0,1};\n    int *wsk=tab-1;\n    int b = *(wsk+=4); //b=\n    int c = b+3; // b=  , c=\n    int d = foo(&b,&c); // b=  , c=  , d=\n    int e = (wsk+=-1)[4]; // b=  , c=  , d=  , e=\n    e = (d *= 2) + (c += 2); // b=  , c=  , d=  , e=\n    c = d + (b+=4); // b=  , c=  , d=  , e=\n    e= (--c)-(d++);  // b=  , c=  , d=  , e=\n    b = *wsk + e; // b=  , c=  , d=  , e=\n    return 0;\n}\n\nPoniżej znajduje się kod w języku C. W niektórych linijkach są komentarze. Twoim zadaniem jest wpisanie wartości odpowiednich zmiennych po wykonaniu konkretnej linii kodu. Dopisanie nowych linijek czy zaburzenie struktury kodu oznacza złe wykonanie polecenia.\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint foo(int*a,int*b)\n{\n    return *a-*b;\n}\n\nint main()\n{\n    int tab[] = {1,5,5,2,3,3,-4,-4,0,1};\n    int *wsk=tab-1;\n    int b = *(wsk+=4); //b=\n    int c = b+3; // b=  , c=\n    int d = foo(&b,&c); // b=  , c=  , d=\n    int e = (wsk+=-1)[4]; // b=  , c=  , d=  , e=\n    e = (d -= 2) - (c += 2); // b=  , c=  , d=  , e=\n    c = d + (b+=4); // b=  , c=  , d=  , e=\n    e= (--c)-(d++);  // b=  , c=  , d=  , e=\n    b = *wsk + e; // b=  , c=  , d=  , e=\n    return 0;\n}\n\nNapisz funkcję o nazwie findElement, która przyjmuje jako argumenty tablicę liczb całkowitych, rozmiar tablicy, liczbę całkowitą val do znalezienia oraz wskaźnik na funkcję isEqual. Funkcja isEqual przyjmuje jako argumenty dwie liczby całkowite i zwraca wartość typu 0 lub 1, oznaczającą odpowiednio, czy liczby są równe. Funkcja findElement powinna przeszukiwać tablicę w celu znalezienia wartości val zgodnie z zasadami określonymi przez funkcję isEqual, a następnie zwrócić indeks tego elementu w tablicy (pierwszego napotkanego) lub -1, jeśli element nie istnieje. Stwórz przypadek testowy dla funkcji findElement.\nNapisz funkcję findWithCondition, która przyjmuje jako argumenty tablicę liczb całkowitych, rozmiar tablicy oraz wskaźnik na funkcję condition. Funkcja condition przyjmuje jako argument liczbę całkowitą i zwraca wartość typu 0 lub 1, oznaczającą odpowiednio, czy liczba spełnia określony warunek. Funkcja findWithCondition powinna przeszukać tablicę w celu znalezienia ostatniej liczby spełniającej warunek określony przez funkcję condition, a następnie zwrócić indeks tego elementu w tablicy lub -1, jeśli taki element nie istnieje. Stwórz przypadek testowy dla funkcji findWithCondition.\nNapisz funkcję, która otrzymuje dwa argumenty: dodatnią liczbę całkowitą \\(n\\) oraz \\(n\\)-elementową tablicę tab o elementach typu int. Funkcja powinna zwrócić wartość 1, gdy tablica tab jest symetryczna (tzn. czy początkowy element jest równy ostatniemu, kolejny przedostatniemu itd.) oraz zwróćić zero w pozostałych przypadkach. Stwórz przypadek testowy dla funkcji.\nNapisz funkcję, która otrzymuje trzy argumenty: dodatnią liczbę całkowitą \\(n\\) oraz dwie \\(n\\)-elementowe tablice tab1 i tab2 o elementach typu int. Funkcja powinna sprawdzić, czy obie tablice są identyczne. Jeśli tak, funkcja powinna zwrócić 1, w przeciwnym razie zwrócić 0. Stwórz przypadek testowy dla funkcji.\nNapisz funkcję, która otrzymuje dwa argumenty: dodatnią liczbę całkowitą \\(n\\) oraz \\(n\\)-elementową tablicę tab o elementach typu int i zwraca indeks pierwszego wystąpienia największej wartości bezwzględnej elementów przechowywanych w tablicy tab. Stwórz przypadek testowy dla funkcji.\nNapisz funkcję, która otrzymuje dwa argumenty: dodatnią liczbę całkowitą n (\\(n&gt;3\\)) oraz n-elementową tablicę tab o elementach typu double i przesuwa o dwa w lewo wszystkie elementy tablicy (tak, żeby wartość elementu o indeksie n-1 znalazła się w elemencie o indeksie n-3, wartość elementu o indeksie n-2 znalazła się w elemencie o indeksie n-4, zaś wartość elementu o indeksie 0 w elemencie o indeksie n-2, a wartość elementu o indeksie 1 w elemencie o indeksie n-1). Stwórz przypadek testowy dla funkcji.\nNapisz funkcję, która otrzymuje cztery argumenty: dodatnią liczbę całkowitą n, n-elementowe tablice tab1 i tab2 oraz n-elementową tablicę tab3 o elementach typu double. Funkcja powinna obliczać iloczyn elementów tablic tab1 i tab2 o tych samych indeksach i zapisywać wyniki do tablicy tab3. Stwórz przypadek testowy dla funkcji.\nNapisz funkcję sum_odd_indices, która otrzymuje dwa argumenty: dodatnią liczbę całkowitą \\(n\\) oraz \\(n\\)-elementową tablicę tab o elementach typu int. Funkcja ma zwrócić sumę elementów znajdujących się na nieparzystych indeksach. Stwórz przypadek testowy.\nNapisz funkcję count_positive_elements, która otrzymuje dwa argumenty: dodatnią liczbę całkowitą \\(n\\) oraz \\(n\\)-elementową tablicę tab o elementach typu int. Funkcja ma zwrócić liczbę dodatnich elementów w tablicy. Stwórz przypadek testowy.\n\nPrzykład. Dla tablicy zawierającej elementy 3,-4,5 powinno być zwrócone 2.\n\nNapisz funkcję double_odd_elements, która otrzymuje dwa argumenty: dodatnią liczbę całkowitą \\(n\\) oraz \\(n\\)-elementową tablicę tab o elementach typu int. Funkcja ma podwoić elementy nieparzyste znajdujące się w tablicy. Stwórz przypadek testowy.\nNapisz funkcję increase_by_index, która otrzymuje dwa argumenty: dodatnią liczbę całkowitą \\(n\\) oraz \\(n\\)-elementową tablicę tab o elementach typu int. Funkcja ma zwiększyć wartość każdego elementu tablicy o jego indeks. Stwórz przypadek testowy.",
    "crumbs": [
      "Podstawy języka C",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Tablice jednowymiarowe</span>"
    ]
  },
  {
    "objectID": "napisy.html",
    "href": "napisy.html",
    "title": "9  Napisy",
    "section": "",
    "text": "Napisz funkcję length, która jako argument otrzymuje napis i zwraca jako wartość jego długość. Użyj typu char i nie korzystaj ze wbudowanych funkcji poza operacjami wejścia/wyjścia. Stwórz przypadek testowy.\nNapisz funkcję countNums, która przyjmuje jako argument tablicę znaków typu char i zwraca liczbę znaków w tej tablicy, które są cyframi. Nie korzystaj ze wbudowanych funkcji języka oprócz operacji wejścia/wyjścia. Stwórz przypadek testowy dla swojej funkcji.\nNapisz funkcję countVow przyjmującą jako argument tablicę znaków typu char i zwracającą liczbę znaków w tej tablicy, które są samogłoskami z alfabetu łacińskiego. Nie korzystaj ze wbudowanych funkcji języka oprócz operacji wejścia/wyjścia. Stwórz przypadek testowy dla tej funkcji.\nNapisz funkcję cmpStrNew przyjmującą dwa argumenty typu char[] (tablice znaków) i zwracającą 1, jeśli napisy są identyczne, oraz 0 w pozostałych przypadkach. Nie korzystaj ze wbudowanych funkcji języka oprócz operacji wejścia/wyjścia. Stwórz przypadek testowy dla tej funkcji.\nNapisz funkcję lexComp przyjmującą dwa argumenty typu char[] (tablice znaków) i zwracającą 1, jeśli pierwszy napis jest wcześniej w porządku leksykograficznym niż drugi, oraz 0 w pozostałych przypadkach. Nie korzystaj ze wbudowanych funkcji języka oprócz operacji wejścia/wyjścia. Stwórz przypadek testowy dla tej funkcji.\nNapisz funkcję toLowerNew, która przyjmuje jako argument tablicę znaków typu char i zamienia w niej wszystkie duże litery na małe. Nie korzystaj ze wbudowanych funkcji języka oprócz operacji wejścia/wyjścia. Stwórz przypadek testowy dla tej funkcji.\nNapisz funkcję toUpperNew, która przyjmuje jako argument tablicę znaków typu char i zamienia w niej wszystkie małe litery na duże. Nie korzystaj ze wbudowanych funkcji języka oprócz operacji wejścia/wyjścia. Stwórz przypadek testowy dla tej funkcji.\nNapisz funkcję strCopyNew, która otrzymuje dwa argumenty typu char[] (tablice znaków): źródłową i docelową. Funkcja przepisuje napis znajdujący się w tablicy źródłowej do tablicy docelowej. Zakładamy, że w tablicy docelowej jest wystarczająco dużo miejsca. Nie korzystaj ze wbudowanych funkcji języka oprócz operacji wejścia/wyjścia. Stwórz przypadek testowy dla tej funkcji.\nNapisz funkcję strNcopy, która otrzymuje trzy argumenty: dwie tablice znaków nap1, nap2 oraz dodatnią liczbę całkowitą n. Funkcja przekopiuje n pierwszych znaków z napisu przechowywanego w tablicy nap1 do tablicy nap2. Jeśli napis w tablicy nap1 jest krótszy niż n znaków, funkcja przepisuje cały napis. Funkcja gwarantuje, że na końcu napisu w tablicy nap2 znajdzie się znak null-terminujący ('\\0'). Zakładamy, że w tablicy nap2 jest wystarczająco dużo miejsca. Nie korzystaj ze wbudowanych funkcji języka oprócz operacji wejścia/wyjścia. Stwórz przypadek testowy dla tej funkcji.\nNapisz funkcję strConcat, która otrzymuje jako argumenty trzy tablice znaków: nap1, nap2 oraz nap3. Funkcja zapisuje do tablicy nap3 konkatenację (połączenie) napisów znajdujących się w tablicach nap1 i nap2. Zakładamy, że w tablicy nap3 jest wystarczająco dużo miejsca. Nie korzystaj ze wbudowanych funkcji języka oprócz operacji wejścia/wyjścia. Stwórz przypadek testowy dla tej funkcji.\nNapisz funkcję rmLower, która przyjmuje jako argument tablicę znaków typu char i usuwa z niej wszystkie znaki będące małymi literami. Nie korzystaj ze wbudowanych funkcji języka oprócz operacji wejścia/wyjścia. Stwórz przypadek testowy dla tej funkcji.\nNapisz funkcję rmDigits, która przyjmuje jako argument tablicę znaków typu char i usuwa z niej wszystkie znaki będące cyframi. Nie korzystaj ze wbudowanych funkcji języka oprócz operacji wejścia/wyjścia. Stwórz przypadek testowy dla tej funkcji.\nNapisz funkcję cutStr, która otrzymuje jako argumenty tablicę znaków typu char oraz dwie liczby całkowite n i m, i wycina z otrzymanego napisu znaki o indeksach od n do m (przy założeniu, że n&lt;m). Nie korzystaj ze wbudowanych funkcji języka oprócz operacji wejścia/wyjścia. Stwórz przypadek testowy dla tej funkcji.\nNapisz funkcję wStrCopyNew, która otrzymuje dwa argumenty typu wchar_t[] (tablice znaków): źródłową i docelową. Funkcja przepisuje napis znajdujący się w tablicy źródłowej do tablicy docelowej. Zakładamy, że w tablicy docelowej jest wystarczająco dużo miejsca. Nie korzystaj ze wbudowanych funkcji języka oprócz operacji wejścia/wyjścia. Stwórz przypadek testowy dla tej funkcji.\nNapisz funkcję wStrConcat, która otrzymuje jako argumenty trzy tablice znaków: nap1, nap2 oraz nap3 (użyj typu znakowego wchar_t). Funkcja zapisuje do tablicy nap3 konkatenację (połączenie) napisów znajdujących się w tablicach nap1 i nap2. Zakładamy, że w tablicy nap3 jest wystarczająco dużo miejsca. Nie korzystaj ze wbudowanych funkcji języka oprócz operacji wejścia/wyjścia. Stwórz przypadek testowy dla tej funkcji.\nNapisz funkcję w16, której argumentem jest napis. Jeśli napis zawiera inne znaki niż cyfr, to funkcja ma zwracać zero. Jeśli napis zawiera tylko cyfry, funkcja ma zwrócić liczbę całkowitą powstałą z przepisania kolejno znaków cyfr. Załóż, że napis jest długości dokładnie 3. W zadaniu nie korzystaj z funkcji bibliotecznych poza instrukcjami wejścia/wyjścia. Stwórz przypadek testowy. Wykorzystaj w rozwiązaniu typ wchar_t.\nNapisz funkcję rmOdd, której argumentem jest napis. Funkcja ma za zadanie usunąć znaki z napisu o nieparzystych indeksach. Stwórz przypadek testowy.\nNapisz funkcję copyEveryThird, której argumentem jest napis. Funkcja ma za zadanie zwrócić nowy napis, który zawiera tylko co trzeci znak z oryginalnego napisu. Stwórz przypadek testowy.\n\nPrzykład: Dla napisu \"ABCXYZ\" funkcja powinna zwrócić \"AX\".\n\nNapisz funkcję indexLower, której argumentem jest napis. Funkcja zwraca numer indeksu, na którym występuje pierwsza od lewej mała litera. W przypadku pustego napisu lub braku małych liter, funkcja powinna zwracać zero. W zadaniu nie korzystaj z funkcji bibliotecznych poza instrukcjami wejścia/wyjścia. Stwórz przypadek testowy.\nNapisz funkcję countOdds, której argumentem jest napis. Funkcja ma zwrócić liczbę znaków cyfr nieparzystych występujących w napisie. Stwórz przypadek testowy.",
    "crumbs": [
      "Podstawy języka C",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Napisy</span>"
    ]
  },
  {
    "objectID": "tablicewielowymiarowe.html",
    "href": "tablicewielowymiarowe.html",
    "title": "10  Tablice wielowymiarowe",
    "section": "",
    "text": "Napisz funkcję sumMatrix, która dostaje jako argumenty dwie dodatnie liczby całkowite n i m oraz dwuwymiarową tablicę o elementach typu int o wymiarach \\(n\\times m\\) i zwraca jako wartość sumę wartości elementów tablicy. Stwórz przypadek testowy dla funkcji.\nNapisz funkcję sumArray, która dostaje jako argumenty dwie dodatnie liczby całkowite n i m oraz dwuwymiarową tablicę tablic o elementach typu int o wymiarach \\(n\\times m\\) i zwraca jako wartość sumę wartości elementów tablicy. Stwórz przypadek testowy dla funkcji.\nNapisz funkcję maxRowIdx, która dostaje jako argumenty dwie dodatnie liczby całkowite n i m oraz dwuwymiarową tablicę o elementach typu int o wymiarach \\(n\\times m\\). Funkcja ma zwrócić indeks wiersza, w którym znajduje się największy element (w przypadku kilku możliwych indeksów, zwróć najmniejszy z możliwych). Stwórz przypadek testowy dla funkcji.\nNapisz funkcję minColIdx, która dostaje jako argumenty dwie dodatnie liczby całkowite n i m oraz dwuwymiarową tablicę tablic o elementach typu int o wymiarach \\(n\\times m\\). Funkcja ma zwrócić indeks kolumny, w którym znajduje się najmniejszy element (w przypadku kilku możliwych indeksów, zwróć najmniejszy z możliwych). Stwórz przypadek testowy dla funkcji.\nNapisz funkcję copyMat, która dostaje jako argumenty dwie dodatnie liczby całkowite n i m oraz dwie dwumiarowe tablice o elementach typu int o wymiarach \\(n\\times m\\). Funkcja ma przepisać zawartość drugiej tablicy do pierwszej tablicy. Stwórz przypadek testowy dla funkcji.\nNapisz funkcję copyArr2D, która dostaje jako argumenty dwie dodatnie liczby całkowite n i m oraz dwie dwumiarowe tablice tablic o elementach typu int o wymiarach \\(n\\times m\\). Funkcja ma przepisać zawartość drugiej tablicy do pierwszej tablicy. Stwórz przypadek testowy dla funkcji.\nNapisz funkcję swapElems, która dostaje jako argumenty dwie dodatnie liczby całkowite n i m oraz dwie dwumiarowe tablice o elementach typu int o wymiarach \\(n\\times m\\). Funkcja ma zamienić odpowiednie elementy obu tablic między sobą. Stwórz przypadek testowy dla funkcji.\nNapisz funkcję swapItems, która dostaje jako argumenty dwie dodatnie liczby całkowite n i m oraz dwie dwumiarowe tablice tablic o elementach typu int o wymiarach \\(n\\times m\\). Funkcja ma zamienić odpowiednie elementy obu tablic między sobą. Stwórz przypadek testowy dla funkcji.\nNapisz funkcję revRows, która dostaje jako argumenty dwie dodatnie liczby całkowite n i m oraz dwuwymiarową tablicę o elementach typu int o wymiarach \\(n\\times m\\). Funkcja ma odwrócić kolejność elementów w każdym wierszu. Stwórz przypadek testowy dla funkcji.\nNapisz funkcję revRowArr, która dostaje jako argumenty dwie dodatnie liczby całkowite n i m oraz dwuwymiarową tablicę tablic o elementach typu int o wymiarach \\(n\\times m\\). Funkcja ma odwrócić kolejność elementów w każdym wierszu. Stwórz przypadek testowy dla funkcji.\nNapisz funkcję revCols, która dostaje jako argumenty dwie dodatnie liczby całkowite n i m oraz dwuwymiarową tablicę o elementach typu int o wymiarach \\(n\\times m\\). Funkcja ma odwrócić kolejność elementów w każdej kolumnie. Stwórz przypadek testowy dla funkcji.\nNapisz funkcję revColArr, która dostaje jako argumenty dwie dodatnie liczby całkowite n i m oraz dwuwymiarową tablicę tablic o elementach typu int o wymiarach \\(n\\times m\\). Funkcja ma odwrócić kolejność elementów w każdej kolumnie. Stwórz przypadek testowy dla funkcji.\nNapisz funkcję transpose, która dostaje jako argumenty dodatnią liczbę całkowitą n i dwuwymiarową kwadratową tablicę o elementach typu int o wymiarach \\(n\\times n\\). Funkcja ma transponować elementy tablicy (zamienić wiersze na kolumny). Stwórz przypadek testowy dla funkcji.\nNapisz funkcję transArr, która dostaje jako argumenty dodatnią liczbę całkowitą n i dwuwymiarową kwadratową tablicę tablic o elementach typu int o wymiarach \\(n\\times n\\). Funkcja ma transponować elementy tablicy (zamienić wiersze na kolumny). Stwórz przypadek testowy dla funkcji.\nNapisz funkcję oddAvg, której argumentem jest dwuwymiarowa tablica tablic (zawierająca zmienne typu int) oraz jej wymiary \\(n, n&gt;1\\) i \\(m, m&gt;1\\). Funkcja ma zwrócić średnią elementów stojących na nieparzystych indeksach (oba mają być jednocześnie nieparzyste). Stwórz przypadek testowy.\nNapisz funkcję evenSum, której argumentem jest dwuwymiarowa tablica tablic (zawierająca zmienne typu int) oraz jej wymiary \\(n, n&gt;1\\) i \\(m, m&gt;1\\). Funkcja powinna zwrócić sumę elementów stojących na parzystych indeksach (zarówno indeksy wierszy jak i kolumn są parzyste). Stwórz przypadek testowy.\nNapisz funkcję swap2nd, której argumentem jest dwuwymiarowa tablica tablic (zawierająca zmienne typu int) oraz jej wymiary \\(n\\) i \\(m\\). Funkcja ma zamienić miejscami wiersz o indeksie 1 z przedostatnim. Jeśli tablica ma mniej niż cztery wiersze, funkcja ma nic nie robić. Stwórz przypadek testowy.\n\nPrzykład:\n\\[\\left[\\begin{array}{ccc} 2 & 3 & -3\\\\ 1 & 4 & 7 \\\\ -3 & -6 & 11 \\\\ -2 & 8 & 23\\end{array}\\right] \\longrightarrow\\left[\\begin{array}{ccc} 2 & 3 & -3\\\\ -3 & -6 & 11 \\\\ 1 & 4 & 7 \\\\ -2 & 8 & 23\\end{array}\\right]\\]\n\nNapisz funkcję flipDiag, której argumentami są dwie dodatnie liczby całkowite \\(n\\) i \\(m\\) oraz dwuwymiarowa tablica elementów (zawierająca zmienne typu int) wymiaru \\(n\\times m\\). Funkcja ma zamienić kolejność elementów leżących na głównej przekątnej. Funkcja powinna działać tylko dla macierzy kwadratowych, w przeciwnym przypadku nie powinna nic robić. Stwórz przypadek testowy.\n\nPrzykład:\n\\[\\left[\\begin{array}{ccc} 2 & 3 & -3\\\\ 1 & 4 & 7 \\\\ -3 & -6 & 11 \\end{array}\\right] \\longrightarrow\\left[\\begin{array}{ccc} 11& 3 & -3\\\\ 1 & 4 & 7 \\\\ -3 & -6 & 2 \\end{array}\\right]\\]\n\nNapisz funkcję swapColumns, która przyjmuje jako argumenty dwuwymiarową tablicę tablic liczb całkowitych, jej wymiary oraz dwa indeksy kolumn do zamiany miejscami. Funkcja powinna przestawić wskazane kolumny i zwrócić zmodyfikowaną tablicę. Uwzględnij sytuację, jeśli podane indeksy są nieprawidłowe - wtedy funkcja ma nic nie robić. Stwórz przypadek testowy dla funkcji.\nNapisz funkcję revOddCol, której argumentami są dwie dodatnie liczby całkowite \\(n\\) i \\(m\\) oraz dwuwymiarowa tablica elementów (zawierająca zmienne typu int) wymiaru \\(n\\times m\\). Funkcja ma odwrócić kolejność elementów w kolumnach o nieparzystych indeksach. Stwórz przypadek testowy.\n\nPrzykład.\n\\[\\left[\\begin{array}{ccc} 2 & 3 & -3\\\\ 1 & 4 & 7 \\\\ -3 & -6 & 11 \\\\ -2 & 8 & 23\\end{array}\\right] \\longrightarrow\\left[\\begin{array}{ccc} 2 & 8 & -3\\\\ 1 & -6 & 7 \\\\ -3 & 4 & 11 \\\\ -2 & 3 & 23\\end{array}\\right]\\]\n\nStwórz funkcję idxDiff, której argumentem jest dwuwymiarowa kwadratowa tablica tablic (zawierająca elementy typu int) oraz jej wymiar \\(n, n&gt;0\\). Funkcja powinna zwracać różnicę między sumą indeksów najmniejszego a sumą indeksów największego elementu w tablicy. W przypadku kilku elementów o najmniejszej lub największej wartości, powinny to być najmniejsze możliwe sumy indeksów. Stwórz przypadek testowy.\nNapisz funkcję sqEndCols, której argumentem jest dwuwymiarowa tablica tablic (zawierająca zmienne typu int) oraz jej wymiary \\(n\\) i \\(m\\) (\\(n&gt;0, m&gt;1\\)). Funkcja ma podnieść do kwadratu element z pierwszej i ostatniej kolumny. Stwórz przypadek testowy.\n\nPrzykład:\n\\[\\begin{bmatrix}\n1 & 2 & 3\\\\\n0 & 5 & 8 \\\\\n9 & 8 & -2 \\\\\n-2 & 3 & 4\n\\end{bmatrix} \\longrightarrow \\begin{bmatrix}\n1 & 2 & 9\\\\\n0 & 5 & 64 \\\\\n81 & 8 & 4 \\\\\n4 & 3 & 16\n\\end{bmatrix}\\]\n\nNapisz funkcję transCopy, która dostaje jako argumenty dodatnią liczbę całkowitą n i dwuwymiarową kwadratową tablicę tablic o elementach typu int o wymiarach \\(n\\times n\\). Funkcja ma zwrócić wskaźnik na nowo-utworzoną dynamiczną dwuwymiarową tablicę powstałą z przekazanego argumentu poprzez transponowanie jej elementów. Stwórz przypadek testowy dla funkcji.\nNapisz funkcję newArrOneD, która dostaje jako argumenty dwie dodatnie liczby całkowite n i m oraz dwuwymiarową tablicę tablic o elementach typu int o wymiarach \\(n\\times m\\). Funkcja ma zwrócić wskaźnik nowo-utworzoną dynamiczną jednowymiarową tablicę powstało z argumentu poprzez przepisanie elementów kolejno wierszami. Stwórz przypadek testowy dla funkcji.\nNapisz funkcję sortRows, która dostaje jako argumenty dwie dodatnie liczby całkowite n i m oraz dwuwymiarową tablicę tablic o elementach typu int o wymiarach \\(n\\times m\\). Funkcja ma posortować elementy osobno każdego wiersza od najmniejszego do największego. Stwórz przypadek testowy dla funkcji.\n\nPrzykład:\n\\[\\begin{bmatrix}\n1 & 2 & 3\\\\\n0 & -5 & 8 \\\\\n9 & 8 & -2 \\\\\n-3 & 5 & 4\n\\end{bmatrix} \\longrightarrow \\begin{bmatrix}\n1 & 2 & 3\\\\\n-5 & 0 & 8 \\\\\n-2 & 8 & 9 \\\\\n-3 & 4 & 5\n\\end{bmatrix}\\]\n\nNapisz funkcję sortCols, która dostaje jako argumenty dwie dodatnie liczby całkowite n i m oraz dwuwymiarową tablicę tablic o elementach typu int o wymiarach \\(n\\times m\\). Funkcja ma posortować elementy osobno każdej kolumny od największej do najmniejszej. Stwórz przypadek testowy dla funkcji.\n\nPrzykład:\n\\[\\begin{bmatrix}\n1 & 2 & 3\\\\\n0 & -5 & 8 \\\\\n9 & 8 & -2 \\\\\n-3 & 5 & 4\n\\end{bmatrix} \\longrightarrow \\begin{bmatrix}\n9 & 8 & 8\\\\\n1 & 5 & 4 \\\\\n0 & 2 & 3 \\\\\n-3 & -5 & -2\n\\end{bmatrix}\\]\n\nNapisz funkcję showRows, która dostaje jako argumenty dwie dodatnie liczby całkowite n i m oraz dwuwymiarową tablicę tablic o elementach typu int o wymiarach \\(n\\times m\\). Funkcja ma wyświetlić elementy tablicy w następujący sposób: elementy każdego wiersza mają być rozdzielone przecinkiem, a kolejne wiersze między osobą rozdzielone znakiem końca linii, na końcu każdej linii nie powinno być przecinka. Stwórz przypadek testowy dla funkcji.\n\nPrzykład: Dla tablicy\n\\[\\begin{bmatrix}\n1 & 2 & 3\\\\\n0 & -5 & 8 \\\\\n9 & 8 & -2 \\\\\n-3 & 5 & 4\n\\end{bmatrix}\\]\nma być wyświetlone dokładnie:\n1,2,3\n0,-5,8\n9,8,-2\n-3,5,4\n\nNapisz funkcję showCols, która dostaje jako argumenty dwie dodatnie liczby całkowite n i m oraz dwuwymiarową tablicę tablic o elementach typu int o wymiarach \\(n\\times m\\). Funkcja ma wyświetlić elementy tablicy w następujący sposób: elementy każdej kolumny mają być rozdzielone przecinkiem w jednej linii, a kolejne kolumny między osobą rozdzielone znakiem końca linii, na końcu każdej linii nie powinno być przecinka. Stwórz przypadek testowy dla funkcji.\n\nPrzykład: Dla tablicy\n\\[\\begin{bmatrix}\n1 & 2 & 3\\\\\n0 & -5 & 8 \\\\\n9 & 8 & -2 \\\\\n-3 & 5 & 4\n\\end{bmatrix}\\]\nma być wyświetlone dokładnie:\n1,0,9,-3\n2,-5,8,5\n3,8,-2,4\n\nNapisz funkcję snkPrint, która dostaje jako argumenty dwie dodatnie liczby całkowite n i m oraz dwuwymiarową tablicę tablic o elementach typu int o wymiarach \\(n\\times m\\). Funkcja ma wyświetlić elementy tablicy w jednym wierszu rozdzielone spacją na zasadzie “ślimaka,węża” (spójrz na przykład). Stwórz przypadek testowy dla funkcji.\n\nPrzykład: Dla tablicy\n\\[\\begin{bmatrix}\n1 & 2 & 3\\\\\n0 & -5 & 8 \\\\\n9 & 8 & -2 \\\\\n-3 & 5 & 4\n\\end{bmatrix}\\]\nma być wyświetlone dokładnie:\n1 2 3 8 -2 4 5 -3 9 0 -5 8",
    "crumbs": [
      "Podstawy języka C",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Tablice wielowymiarowe</span>"
    ]
  },
  {
    "objectID": "zlozonetypydanych.html",
    "href": "zlozonetypydanych.html",
    "title": "11  Złożone typy danych",
    "section": "",
    "text": "W poniższych zadaniach o ile nie zaznaczono inaczej pojęcia nazwa i alias struktury można używać zamiennie.\n\nZdefiniuj strukturę Car z polami: brand (napis), model (tablica znaków o rozmiarze 20), year (liczba całkowita) i isAvailable (wartość 0 lub 1), która reprezentuje informację o dostępności samochodu na sprzedaż. W main stwórz kilka zmiennych w typie Car.\nUtwórz strukturę Student, która zawiera: firstName (łańcuch znaków), lastName (łańcuch znaków), id (liczba całkowita) oraz gpa (liczba zmiennoprzecinkowa), reprezentującą średnią ocen studenta. W main stwórz trzy zmienne w typie Student. Następnie z tych trzech zmiennych stwórz tablicę.\nZaplanuj strukturę Rectangle, mającą pola: width (liczba zmiennoprzecinkowa), height (liczba zmiennoprzecinkowa) i color (łańcuch znaków), która ma służyć do przechowywania informacji o wymiarach i kolorze prostokąta. W main stwórz 4-elementową tablicę zmiennych typu Rectangle.\nStwórz strukturę WeatherInfo zawierającą: temperature (liczba zmiennoprzecinkowa), humidity (liczba zmiennoprzecinkowa) i windSpeed (liczba zmiennoprzecinkowa), która będzie używana do przechowywania danych meteorologicznych. W main stwórz kilka zmiennych w typie WeatherInfo.\nZaprojektuj strukturę Book z polami: title (łańcuch znaków), author (łańcuch znaków), publishedYear (liczba całkowita) i pages (liczba całkowita), która ma opisywać podstawowe informacje o książce. W main stwórz 5-elementową tablicę zmiennych typu Book.\nNapisz strukturę Person z polami name (tablica znaków długości 20) oraz age (typu int). Następnie napisz funkcje i wywołają każdą z nich co najmniej jeden raz:\n\n\ninitPerson - funkcja przyjmuje dwa argumentem imię i wiek i zwraca wskaźnik na nowo-utworzoną strukturę ustawiającą składowe z przekazanych argumentów.\nshowPerson - funkcja, której argumentem jest zmienna w typie Person. Funkcja ma wypisać opis przekazanego argumentu (wpisać wiek i imię na standardowym wyjściu).\nbirthday - funkcja, której argumentem jest wskaźnik do struktury typu Person. Funkcja ma powiększyć wiek o 1 w przekazanym argumencie.\n\nStwórz przypadek testowy dla każdej z funkcji.\n\nNapisz strukturę Car z polami brand (tablica znaków długości 20) oraz mileage (typu int). Następnie napisz funkcje i wywołaj każdą z nich co najmniej jeden raz:\n\n\ninitCar - funkcja przyjmuje dwa argumenty: markę i przebieg, i zwraca nowo-utworzoną strukturę ustawiającą składowe z przekazanych argumentów.\nshowCar - funkcja, której argumentem jest zmienna w typie Car. Funkcja ma wypisać opis przekazanego argumentu (wypisać markę i przebieg na standardowym wyjściu).\nmileageService - funkcja, której argumentem jest wskaźnik do struktury typu Car. Funkcja ma dodać 10000 do przebiegu w przekazanym argumencie.\n\nStwórz przypadek testowy dla każdej z funkcji.\n\nNapisz strukturę Book z polami title (tablica znaków długości 50) oraz page_count (typu int). Następnie napisz funkcje i wywołaj każdą z nich co najmniej jeden raz:\n\n\ninitBook - funkcja przyjmuje dwa argumenty: tytuł i liczbę stron, i zwraca nowo-utworzoną strukturę ustawiającą składowe z przekazanych argumentów.\nshowBook - funkcja, której argumentem jest zmienna w typie Book. Funkcja ma wypisać opis przekazanego argumentu (wypisać tytuł i liczbę stron na standardowym wyjściu).\naddPages - funkcja, której argumentem jest wskaźnik do struktury typu Book. Funkcja ma dodać 10 do liczby stron w przekazanym argumencie.\n\nStwórz przypadek testowy dla każdej z funkcji.\n\nNapisz strukturę Laptop z polami model (tablica znaków długości 30) oraz price (typu float). Następnie napisz funkcje i wywołaj każdą z nich co najmniej jeden raz:\n\n\ninitLaptop - funkcja przyjmuje dwa argumenty: model i cenę, i zwraca nowo-utworzoną strukturę ustawiającą składowe z przekazanych argumentów.\nshowLaptop - funkcja, której argumentem jest zmienna w typie Laptop. Funkcja ma wypisać opis przekazanego argumentu (wypisać model i cenę na standardowym wyjściu).\nreducePrice - funkcja, której argumentem jest wskaźnik do struktury typu Laptop. Funkcja ma obniżyć cenę o 5% w przekazanym argumencie.\n\nStwórz przypadek testowy dla każdej z funkcji.\n\nStwórz strukturę Airplane o dwóch polach model (napis) oraz number_of_engines (dowolny typ całkowity). Następnie stwórz funkcję, której argumentami jest niepusta tablica struktur Airplane oraz rozmiar tablicy. Funkcja ma zwrócić najmniejszą liczbę silników. Stwórz przypadek testowy.\nStwórz strukturę Computer o dwóch polach brand (napis) oraz number_of_cores (dowolny typ całkowity). Następnie stwórz funkcję, której argumentami jest niepusta tablica struktur Computer oraz rozmiar tablicy. Funkcja ma zwrócić największą liczbę rdzeni. Stwórz przypadek testowy.\nStwórz strukturę Book o dwóch polach: title (napis) i page_count (int). Następnie stwórz funkcję, której argumentami jest niepusta tablica struktur Book oraz rozmiar tablicy. Funkcja ma zwrócić książkę (jako strukturę) z największą liczbę stron. W przypadku kilku książek w tablicy z największą liczbą stron, to zwróć ostatnią z możliwych. Stwórz przypadek testowy.\nNapisz strukturę Car z polami brand (tablica znaków długości 50) oraz mileage (typu int). Następnie napisz dwie funkcje i wywołaj każdą z nich co najmniej jeden raz:\n\n\ninitCar - funkcja przyjmuje dwa argumenty: markę i przebieg, i zwraca wskaźnik na nowo utworzoną strukturę, ustawiając składowe z przekazanych argumentów. Dodatkowo funkcja powinna sprawdzić, aby marka była napisem długości co najmniej 2 i przebieg był większy niż 0. W przypadku nie spełnienia co najmniej jednego z warunków, funkcja powinna zwracać NULL.\nincreaseMileage - funkcja, której argumentem jest wskaźnik do struktury typu Car. Funkcja ma dodać 1000 do przebiegu w przekazanym argumencie.\n\nUpewnij się, że drugą funkcję możesz wywołać w main.\n\nNapisz strukturę Bike z polami model (tablica znaków długości 40) oraz distance_travelled (typu int). Następnie napisz dwie funkcje i wywołaj każdą z nich co najmniej jeden raz:\n\n\ninitBike - funkcja przyjmuje dwa argumenty: model roweru i odległość przejechaną, i zwraca wskaźnik na nowo utworzoną strukturę, ustawiając wartości zgodnie z przekazanymi argumentami. Funkcja powinna dodatkowo sprawdzać, czy model jest napisem o długości co najmniej 3 i odległość przejechana jest większa od 0. W przypadku nie spełnienia co najmniej jednego z warunków, funkcja powinna zwracać NULL.\nincreaseDistance - funkcja, której argumentem jest wskaźnik do struktury Bike. Funkcja powinna dodać 500 do przejechanej odległości.\n\nUpewnij się, że drugą funkcję możesz wywołać w main.\n\nNapisz strukturę Computer z polami manufacturer (tablica znaków długości 30) oraz usage_hours (typu int). Następnie napisz dwie funkcje i wywołaj każdą z nich co najmniej jeden raz:\n\n\ninitComputer - funkcja przyjmuje dwa argumenty: producenta i liczbę godzin używania, i zwraca wskaźnik na nowo utworzoną strukturę, ustawiając wartości zgodnie z przekazanymi argumentami. Funkcja powinna także sprawdzać, czy nazwa producenta ma co najmniej 2 znaki i liczba godzin jest większa od 0. Jeśli oba warunki nie są spełnione łącznie, funkcja powinna zwracać NULL.\nincreaseUsage - funkcja, której argumentem jest wskaźnik do struktury Computer. Funkcja powinna dodać 100 do liczby godzin użytkowania.\n\nUpewnij się, że drugą funkcję możesz wywołać w main.\n\nNapisz strukturę Apartment z polami address (tablica znaków długości 100) oraz number_of_residents (typu int). Następnie napisz dwie funkcje i wywołaj każdą z nich co najmniej jeden raz:\n\n\ninitApartment - funkcja przyjmuje dwa argumenty: adres i liczbę mieszkańców, i zwraca wskaźnik na nowo utworzoną strukturę, ustawiając wartości zgodnie z przekazanymi argumentami. Funkcja powinna sprawdzać, czy adres ma co najmniej 5 znaków i liczba mieszkańców jest większa niż 0. W przypadku nie spełnienia obu warunków łącznie, funkcja powinna zwracać NULL.\nincreaseResidents - funkcja, której argumentem jest wskaźnik do struktury Apartment. Funkcja powinna dodać 2 do liczby mieszkańców.\n\nUpewnij się, że drugą funkcję możesz wywołać w main.\n\nUtwórz typ wyliczeniowy Month reprezentujący miesiące. Napisz funkcję days_in_month(), która przyjmuje jako argument wartość typu Month i zwraca liczbę dni w danym miesiącu. Pomiń problem roku przestępnego w tym zadaniu. Stwórz przypadek testowy dla funkcji.\nUtwórz typ wyliczeniowy Day reprezentujący dni tygodnia. Napisz funkcję print_days(), która przyjmuje jako argumenty wartość typu Day i liczbę n. Funkcja powinna wydrukować bieżący dzień tygodnia, a następnie rekurencyjnie wywołać siebie z następnym dniem tygodnia, dekrementując n przy każdym wywołaniu, aż n spadnie do 0. Stwórz przypadek testowy dla funkcji.\nStwórz unię Number, która umożliwia jednoczesne przechowywanie liczby całkowitej i wymiernej. Następnie “opakuj” unię w strukturę i stwórz funkcję, które umożliwiają zainicjowanie pól unii ze standardowego wejścia. Stwórz przypadek testowy dla funkcji.\nStwórz strukturę element o dwóch polach: i typu int oraz next będące wskaźnikiem na zdefiniowaną strukturę. Stwórz w main kilka zmiennych strukturalnych.",
    "crumbs": [
      "Podstawy języka C",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Złożone typy danych</span>"
    ]
  },
  {
    "objectID": "printf-formatowanieliczb.html",
    "href": "printf-formatowanieliczb.html",
    "title": "12  Formatowanie zmiennych liczbowych w printf",
    "section": "",
    "text": "Napisz program, który wyświetla liczbę całkowitą w formacie dziesiętnym.\nNapisz program, który wyświetla liczbę całkowitą w formacie szesnastkowym z małymi literami.\nNapisz program, który wyświetla liczbę całkowitą w formacie szesnastkowym z dużymi literami.\nNapisz program, który wyświetla liczbę całkowitą w formacie ósemkowym.\nNapisz program, który wyświetla liczbę całkowitą z wiodącymi zerami, zakładając, że szerokość pola wynosi 8 znaków.\nNapisz program, który wyświetla liczbę całkowitą z wyrównaniem do prawej w polu o szerokości 10 znaków.\nNapisz program, który wyświetla liczbę całkowitą z wyrównaniem do lewej w polu o szerokości 10 znaków.\nNapisz program, który wyświetla dodatnią liczbę całkowitą z dodanym znakiem plus na początku.\nNapisz program, który wyświetla liczbę całkowitą z użyciem notacji naukowej (z małymi literami).\nNapisz program, który wyświetla liczbę całkowitą, dodając separator tysięcy.\nNapisz program, który wyświetla liczbę zmiennoprzecinkową 123.456789 z dokładnością do dwóch miejsc po przecinku.\nStwórz program, który formatuje i wyświetla liczbę zmiennoprzecinkową -9876.54321, tak aby była przedstawiona z co najmniej 10 miejscami przed przecinkiem, dopełniając brakujące miejsca spacjami.\nUtwórz program, który prezentuje liczbę zmiennoprzecinkową 0.000789 w notacji naukowej z dokładnością do czterech miejsc po przecinku.\nZaprojektuj program, który wyświetla liczbę zmiennoprzecinkową 12345.6789 z użyciem notacji naukowej i dokładnością do jednego miejsca po przecinku.\nStwórz program, który wyświetla liczbę zmiennoprzecinkową 3.14159 w formacie, gdzie przed liczbą znajduje się znak plus, z dokładnością do trzech miejsc po przecinku.\nNapisz program, który formatuje i wyświetla liczbę zmiennoprzecinkową 123456.789 z dokładnością do pięciu miejsc po przecinku, zapewniając, że przed liczbą pojawi się miejsce na znak.\nUtwórz program, który wyświetla liczbę zmiennoprzecinkową -0.0025 z dokładnością do sześciu miejsc po przecinku, zawsze zaczynając od znaku minus.\nZaprojektuj program, który przedstawia liczbę zmiennoprzecinkową 0.00123456789 w notacji naukowej z dokładnością do dwóch miejsc po przecinku i zawsze z przedrostkiem plus dla dodatnich wartości.\nStwórz program, który wyświetla liczbę zmiennoprzecinkową 9999999.99999 z dokładnością do trzech miejsc po przecinku, używając notacji naukowej, gdy jest to konieczne.\nNapisz program, który formatuje i wyświetla liczbę zmiennoprzecinkową -123.456 w taki sposób, że zawsze zajmuje ona dokładnie 12 miejsc, w tym znak, liczby przed i po przecinku, dopełniając niewykorzystane miejsca spacjami.",
    "crumbs": [
      "Dodatki",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Formatowanie zmiennych liczbowych w `printf`</span>"
    ]
  },
  {
    "objectID": "operatoryarytmetyczne.html",
    "href": "operatoryarytmetyczne.html",
    "title": "13  Operatory arytmetyczne",
    "section": "",
    "text": "Napisz program, który oblicza resztę z dzielenia sumy dwóch liczb całkowitych przez trzecią liczbę całkowitą.\nStwórz program, który oblicza różnicę kwadratów dwóch podanych liczb całkowitych.\nOpracuj program, który oblicza iloczyn różnicy dwóch liczb całkowitych i trzeciej liczby całkowitej.\nZaprojektuj program, który oblicza średnią geometryczną bezwzględnych wartości trzech podanych liczb całkowitych.\nNapisz program, który oblicza kwadrat sumy dwóch podanych liczb całkowitych.\nStwórz program, który oblicza sumę kwadratów trzech podanych liczb całkowitych.\nOpracuj program, który oblicza, ile razy jedna podana liczba całkowita mieści się w drugiej podanej liczbie całkowitej.\nZaprojektuj program, który oblicza kwadrat różnicy dwóch podanych liczb całkowitych.\nNapisz program, który oblicza iloraz sumy dwóch liczb całkowitych przez ich różnicę.\nStwórz program, który oblicza sumę trzech kolejnych liczb całkowitych, zaczynając od podanej liczby całkowitej.\nZnajdź średnią arytmetyczną trzech liczb zmiennoprzecinkowych.\nOblicz wartość wyrażenia \\(\\frac{1}{\\frac{1}{a} + \\frac{1}{b} + \\frac{1}{c}}\\), gdzie \\(a\\), \\(b\\), \\(c\\) są różne od zera.\nWylicz wartość \\(e^x\\) dla małych wartości \\(x\\) np. \\(\\|x\\| &lt; 0.01\\) przybliżając \\(e^x\\) jako \\(1 + x\\), bez użycia funkcji eksponencjalnych.\nOblicz pole trójkąta o bokach \\(a\\), \\(b\\) i kącie między nimi \\(C\\) w stopniach, używając wzoru \\(0.5 \\cdot a \\cdot b \\cdot \\sin C\\), przyjmując \\(\\sin C \\approx C\\) dla małych kątów w radianach.\nOblicz \\(\\sqrt[3]{x}\\) dla małych wartości \\(x\\) np. \\(\\|x\\| &lt; 0.01\\) przybliżając \\(\\sqrt[3]{x} \\approx 1 + \\frac{1}{3}x\\), bez użycia funkcji pierwiastkowania.",
    "crumbs": [
      "Dodatki",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Operatory arytmetyczne</span>"
    ]
  },
  {
    "objectID": "operatorybitowe.html",
    "href": "operatorybitowe.html",
    "title": "14  Operatory bitowe",
    "section": "",
    "text": "Zamień wartości dwóch zmiennych całkowitych bez użycia dodatkowej zmiennej.\nSprawdź, czy liczba całkowita jest parzysta czy nieparzysta bez użycia instrukcji warunkowych.\nWyznacz wartość bitu na określonej pozycji w liczbie całkowitej.\nZeruj wartość bitu na określonej pozycji w liczbie całkowitej.\nOdwróć wartość wszystkich bitów w liczbie całkowitej.\nPrzesuń bity liczby całkowitej o określoną liczbę pozycji w lewo.\nPrzesuń bity liczby całkowitej o określoną liczbę pozycji w prawo.\nWyznacz “XOR” dwóch liczb całkowitych.",
    "crumbs": [
      "Dodatki",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Operatory bitowe</span>"
    ]
  },
  {
    "objectID": "zadaniarozne1.html",
    "href": "zadaniarozne1.html",
    "title": "15  Zadanie różne cz.1",
    "section": "",
    "text": "Napisz funkcję, która ma dwa argumenty: dodatnią liczbę całkowitą \\(n\\) oraz liczbę wymierną \\(x\\). Funkcja ma zwrócić jako liczbę wartość wyrażenia będącego sumą szeregu:\n\n\\[\\frac{x}{1!}+\\frac{x^2}{2!}+\\ldots+\\frac{x^n}{n!}.\\]\nW zadaniu nie korzystaj z wbudowanych funkcji matematycznych. Stwórz przypadek testowy dla funkcji.\n\nNapisz funkcję, która ma dwa argumenty: dodatnią liczbę całkowitą \\(n\\) oraz liczbę wymierną \\(x\\). Funkcja ma zwrócić jako liczbę wartość wyrażenia będącego sumą szeregu:\n\n\\[(x+1)+(x^2+2)+\\ldots+(x^n+n).\\]\nW zadaniu nie korzystaj z funkcji matematycznych. Stwórz przypadek testowy dla funkcji.\n\nNapisz rekurencyjną funkcję, której argumentem jest dodatnia liczba całkowita \\(n\\). Funkcja ma zwracać sumę:\n\n\\[5+55+555+\\ldots+\\underbrace{5\\ldots5}_{n \\ razy}.\\]\nStwórz przypadek testowy.\n\nNapisz funkcję rekurencyjną, która wypisze wszystkie liczby naturalne od \\(n\\) do \\(2n\\) (włącznie) dla pewnej dodatniej liczby całkowitej \\(n\\). Możesz samodzielnie ustalić liczbę i typ argumentów pamiętając, że funkcja ma być rekurencyjna. Stwórz przypadek testowy.\nNapisz funkcję, która ma dwa argumenty: dodatnią liczbę całkowitą \\(n\\) oraz dodatnią liczbę wymierną \\(x\\). Funkcja ma zwrócić obliczoną wartość wyrażenia:\n\n\\[1+x+\\frac{x^2}{2!}+ \\frac{x^3}{3!} +\\ldots + \\frac{x^n}{n!}\\]\nW zadaniu nie korzystaj ze wbudowanych funkcji matematycznych. Stwórz przypadek testowy.\n\nNapisz funkcję, której argumentem jest jest dodatnia liczba całkowita \\(n\\). Funkcja ma wyświetlać wszystkie możliwe liczby Nivena mniejsze lub równe \\(n\\) (bez rozkładów). Stwórz przypadek testowy dla funkcji. W zadaniu nie korzystaj ze wbudowanych funkcji matematycznych.\n\nLiczby Nivena – liczby naturalne, które są podzielne przez sumę tworzących je cyfr. Początkowe liczby Nivena: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 18, 20, 21, 24, 27, 30, 36, 40.\n\nNapisz funkcję, której argumentem są dodatnia liczba całkowita \\(n\\). Funkcja ma zwrócić odpowiednią wartość logiczną (zero lub jeden) z informacją czy liczby \\(n\\) jest automorficzna. Nie korzystaj ze wbudowanych funkcji poza instrukcjami wejścia/wyjścia oraz nie korzystaj z konwersji na string/wektor. Stwórz przypadek testowy.\n\nLiczba automorficzna – liczba, która podniesiona do kwadratu zawierają w końcówce same siebie. Np. \\(76 \\cdot 76=5776\\).\nPrzykłady: 0, 1, 5, 6, 25, 76, 376, 625.\n\nNapisz funkcję, której argumentem są dodatnia liczba całkowita \\(n\\). Funkcja ma zwrócić odpowiednią wartość logiczną (zero lub jeden) z informacją czy liczby \\(n\\) jest wesoła. Stwórz przypadek testowy.\n\nLiczba wesoła – liczba naturalna zdefiniowana jako obliczanie sumy kwadratów cyfr składających się na liczbę. Powtarzamy tę operację dla kolejnych wyników tak długo, aż uzyskamy liczbę 1 lub wyniki zaczną się powtarzać. Jeżeli w wyniku procesu otrzymaliśmy 1, pierwotna liczba jest liczbą wesołą. W przeciwnym przypadku jest liczbą niewesołą.\nPrzykładowo 7 jest liczbą wesołą:\n\\[7^2 = 49,\\quad  4^2 + 9^2 = 97,\\quad  9^2 + 7^2 = 130\\] \\[1^2 + 3^2 + 0^2 = 10, \\quad 1^2 + 0^2 = 1.\\] Przykładowo 85 jest liczbą niewesołą:\n\\[8^2 + 5^2 = 89, \\quad\n8^2 + 9^2 = 145, \\quad\n1^2 + 4^2 + 5^2 = 42, \\quad\n4^2 + 2^2 = 20\\] \\[2^2 + 0^2 = 4, \\quad\n4^2 = 16, \\quad\n1^2 + 6^2 = 37, \\quad\n3^2 + 7^2 = 58, \\quad\n5^2 + 8^2 = 89\\]\n\nNapisz funkcję, której argumentem są dodatnia liczba całkowita \\(a\\). Funkcja ma zwrócić odpowiednią wartość logiczną (zero lub jeden) z informacją czy liczby \\(a\\) jest narcystyczna. Nie korzystaj ze wbudowanych funkcji poza instrukcjami wejścia/wyjścia oraz nie korzystaj z konwersji na string/wektor. Stwórz przypadek testowy.\n\nLiczba narcystyczna - \\(n\\)-cyfrowa liczba naturalna, która jest sumą swoich cyfr podniesionych do potęgi \\(n\\).\nPrzykład: 153 jest liczbą narcystyczną. 3 to liczba cyfr oraz \\(153=1^3+5^3+3^3\\).\n\nNapisz funkcję, której argumentem jest dodatnia liczba całkowita \\(n\\). Funkcja ma zwrócić ile cyfr 1 występuje w zapisie dziesiętnym tej liczby. W zadaniu nie korzystaj z konwersji liczby na napis. Stwórz przypadek testowy dla funkcji\nNapisz funkcję, która ma dwa argumenty: dwie dodatnie liczby całkowite \\(m\\) i \\(n\\) (\\(n&gt;1\\)). Funkcja ma zwrócić wartość wyrażenia:\n\n\\(f(m,n) = \\lfloor \\sqrt[n]{m} \\rfloor\\)\nSymbol \\(\\lfloor x \\rfloor\\) - oznacza część całkowitą z \\(x\\). Stwórz przypadek testowy dla funkcji. W zadaniu nie korzystaj ze wbudowanych funkcji matematycznych.\n\nNapisz funkcję, której argumentem są dwie dodatnie liczby całkowite \\(a\\) i \\(b\\). Funkcja ma zwrócić odpowiednią wartość logiczną (zero lub jeden) z informacją czy liczby \\(a\\) i \\(b\\) są swoim lustrzanym odbiciem. Nie korzystaj ze wbudowanych funkcji poza instrukcjami wejścia/wyjścia oraz nie korzystaj z konwersji na napis. Stwórz przypadek testowy.\n\nDwie liczby \\(a\\) i \\(b\\) są swoim lustrzanym odbicie, jeśli jedna z liczb powstaje poprzez odwrócenie kolejności cyfr z drugiej liczby. Przykład 345 i 543 są swoim lustrzanym odbicie.\n\nNapisz program dokonujący rozkładu danej dodatniej liczby naturalnej \\(n\\) na czynniki pierwsze. Na przykład dla \\(n = 24\\) sa to czynniki 2 2 2 3. Liczba \\(n\\) ma być pobrana ze standardowego wejścia, rozkład wyświetlony na standardowym wyjściu.\nNapisz program obliczający tzw. jednocyfrową sumę cyfr liczby \\(n\\). Na początku oblicza się sumę cyfr liczby \\(n\\); jeśli wynikiem jest liczba wielocyfrowa, to znowu oblicza się sumę cyfr tej poprzedniej sumy i tak powtarza, aż do uzyskania liczby jednocyfrowej, która jest wynikiem końcowym. Na przykład dla \\(n = 48\\) suma jednocyfrowa wynosi 3. Liczba \\(n\\) ma być pobrana ze standardowego wejścia, wynik końcowy wyświetlony na standardowym wyjściu.\nNapisz funkcję, której argumentem jest jest dodatnia liczba całkowita \\(n\\). Funkcja ma wyświetlać wszystkie możliwe liczby Armstronga mniejsze lub równe \\(n\\) (bez rozkładów). Stwórz przypadek testowy dla funkcji. W zadaniu nie korzystaj ze wbudowanych funkcji matematycznych.\n\nLiczba Armstronga to dodatnia liczba naturalna, której suma sześcianów poszczególnych cyfr jest równa tej liczbie. Przykładowo: \\(153=1^3+5^3+3^3\\).\n\nNapisz funkcję, której argumentem jest dodatnia liczba całkowita \\(n\\). Funkcja ma zwrócić ile liczb całkowitych dodatnich mniejszych lub równych \\(n\\) ma cyfry, które stanowią palindrom. Stwórz przypadek testowy. W zadaniu nie korzystaj z konwersji na napis.\n\nPrzykłady:\n\nliczba 12321 jest palindromem\nliczby jednocyfrowe są palindromami\nliczba 4556 nie jest palindromem\nliczba 44 jest palindromem\n\n\nNapisz funkcję, która ma dwa argumenty: dwie dodatnie liczby całkowite \\(m\\) i \\(n\\) (\\(m&lt;n\\)). Funkcja ma zwrócić ile liczb pierwszych jest w przedziale \\([2m, 3n]\\). Stwórz przypadek testowy dla funkcji.\nNapisz funkcję czyBliskie, której argumentami są trzy liczby wymierne \\(x,y,\\varepsilon.\\) Funkcja ma zwrócić odpowiednią wartość logiczną (zero lub jeden) po sprawdzeniu czy wartość bezwzględna różnicy \\(x\\) i \\(y\\) jest mniejsza od \\(\\varepsilon\\). Następnie pobierz od użytkownika 5 liczb wymiernych i wyświetl informację, ile z nich jest bliskich spośród wprowadzonych wzajemnie między sobą dla \\(\\varepsilon=2\\). Przykładowy komunikat na koniec:\n\nLiczba 1: ... Ile liczb bliskich: ..\nLiczba 2: ... Ile liczb bliskich: ..\nLiczba 3: ... Ile liczb bliskich: ..\nLiczba 4: ... Ile liczb bliskich: ..\nLiczba 5: ... Ile liczb bliskich: ..",
    "crumbs": [
      "Dodatki",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Zadanie różne cz.1</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Bibliografia i inne zbiory zadań",
    "section": "",
    "text": "Krzaczkowski, Jacek. 2011. Zadania z Programowania w Języku c/c++,\nCz. I. Instytut Informatyki UMCS Lublin.",
    "crumbs": [
      "Bibliografia i inne zbiory zadań"
    ]
  },
  {
    "objectID": "changelog.html",
    "href": "changelog.html",
    "title": "Historia zmian",
    "section": "",
    "text": "17.02.2024 - dodano część: Formatowanie zmiennych liczbowych w printf, Operatory arytmetyczne, Operatory bitowe\n25.02.2024 - dodano część: Instrukcje warunkowe, operator warunkowy, Pętle\n3.03.2024 - dodano część: Funkcje\n10.03.2024 - dodano część: Wskaźniki\n11.03.2024 - dodano link do repozytorium na wybrane rozwiązania\n17.03.2024 - dodano część: Wskaźniki na funkcję, Debugowanie\n24.03.2024 - dodano część: Tablice\n4.04.2024 - dodano część: Napisy\n25.04.2024- dodano część: Tablice wielowymiarowe\n5.05.2024- dodano część: Złożone typy danych",
    "crumbs": [
      "Historia zmian"
    ]
  }
]